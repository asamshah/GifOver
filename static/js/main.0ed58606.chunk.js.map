{"version":3,"sources":["images/loader.svg","images/close-icon.svg","Gif.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Gif","props","state","loaded","this","images","className","autoPlay","loop","src","original","mp4","onLoadedData","setState","Component","Header","clearSearch","hasResults","onClick","clearButton","UserHint","loading","hintText","loader","App","searchGiphy","searchTerm","a","fetch","response","json","data","length","randomGif","arr","Math","floor","random","console","log","prevState","gifs","handleChange","event","value","target","handleKeyPress","key","textInput","focus","map","gif","placeholder","onChange","onKeyPress","ref","input","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0ed58606.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.be00fc4a.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-icon.5b9a3ae1.svg\";","import React, { Component } from \"react\";\n\nclass Gif extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n    };\n  }\n\n  render() {\n    const { loaded } = this.state;\n    const { images } = this.props;\n    return (\n      <video\n        className={`grid-item video loaded ${loaded && \"loaded\"}`}\n        autoPlay\n        loop\n        src={images.original.mp4}\n        onLoadedData={() => this.setState({ loaded: true })}\n      />\n    );\n  }\n}\n\nexport default Gif;\n","import React, { Component } from \"react\";\nimport loader from \"./images/loader.svg\";\nimport Gif from \"./Gif\";\nimport clearButton from \"./images/close-icon.svg\";\n\nconst randomChoice = (arr) => {\n  const randIndex = Math.floor(Math.random() * arr.length);\n  return arr[randIndex];\n};\n\nconst Header = ({ clearSearch, hasResults }) => (\n  <div className=\"header grid\">\n    {hasResults ? (\n      <button onClick={clearSearch}>\n        <img src={clearButton} />\n      </button>\n    ) : (\n      <h1 className=\"title\">GifOver...</h1>\n    )}\n  </div>\n);\n\nconst UserHint = ({ loading, hintText }) => (\n  <div className=\"user-hint\">\n    {loading ? <img className=\"block mx-auto\" src={loader} /> : hintText}\n  </div>\n);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      searchTerm: \"\",\n      hintText: \"\",\n      gifs: [],\n    };\n  }\n\n  searchGiphy = async (searchTerm) => {\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      const response = await fetch(\n        `https://api.giphy.com/v1/gifs/search?api_key=ESyU05lUvW53qpKxKnOdnA1avhf1J6N1&q=${searchTerm}&limit=50&offset=0&rating=G&lang=en`\n      );\n      const { data } = await response.json();\n\n      if (!data.length) {\n        throw `Nothing found for ${searchTerm}`;\n      }\n\n      const randomGif = randomChoice(data);\n      console.log({ randomGif });\n\n      this.setState((prevState, props) => ({\n        ...prevState,\n        gifs: [...prevState.gifs, randomGif],\n        loading: false,\n        hintText: `Hit ↵ enter to see more '${searchTerm}'`,\n      }));\n    } catch (error) {\n      this.setState((prevState, props) => ({\n        ...prevState,\n        hintText: error,\n        loading: false,\n      }));\n    }\n  };\n\n  handleChange = (event) => {\n    const { value } = event.target;\n    this.setState((prevState, props) => ({\n      ...prevState,\n      searchTerm: value,\n      hintText: value.length > 2 ? `Hit ↵ enter to search '${value}'` : \"\",\n    }));\n  };\n\n  handleKeyPress = (event) => {\n    const { value } = event.target;\n\n    if (value.length > 2 && event.key === \"Enter\") {\n      this.searchGiphy(value);\n    }\n  };\n\n  clearSearch = () => {\n    this.setState((prevState, props) => ({\n      ...prevState,\n      searchTerm: \"\",\n      hintText: \"\",\n      gifs: [],\n    }));\n\n    this.textInput.focus();\n  };\n\n  render() {\n    const { searchTerm, gifs } = this.state;\n    const hasResults = gifs.length;\n    return (\n      <div className=\"page\">\n        <Header clearSearch={this.clearSearch} hasResults={hasResults} />\n\n        <div className=\"search grid\">\n          {this.state.gifs.map((gif) => (\n            <Gif {...gif} />\n          ))}\n\n          <input\n            className=\"input grid-item\"\n            placeholder=\"type something\"\n            onChange={this.handleChange}\n            onKeyPress={this.handleKeyPress}\n            value={searchTerm}\n            ref={(input) => {\n              this.textInput = input;\n            }}\n          />\n        </div>\n\n        <UserHint {...this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./css/main.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}